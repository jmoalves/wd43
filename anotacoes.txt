=== WD43 - HTML, CSS, JS
Podemos encarar a estrutura de uma página Web como a construção de um prédio.

* Estrutura - Planta baixa - HTML


---
Podemos usar CSS para reduzir (ou aumentar) a largura de um elemento (tag).
Apenas tag do tipo block podem ter width definida.
Elementos do tipo inline ignoram esta configuração.

Os elementos tem um box-model.

<element>
	<margin - Separa um elemento do outro>
		<border>
			<padding - Separa o conteúdo da borda>
				<conteúdo>
					width só afeta esta parte!!!
				</conteúdo>
			</padding>
		</border>
	</margin>
</element>


Short hand property para padding e similares (ex: margin)
padding-top: 10px;
padding-right: 15px;
padding-bottom: 20px;
padding-left: 50px;

Siga o padrão do relógio: (top right bottom left)
padding: 50px; - Vale para todos;
padding: 50px 100px; - Top/bottom -> 50px Right/left -> 100px
padding: 2px 7px 20px; - Top -> 2px Right/left -> 7px Bottom -> 20px

Podemos usar o valor "auto" para o CSS calcular. Exemplo:
body {
	width: 940px;
	margin: 0 auto; Deixa top/bottom com zero e divide por igual a sobra com right/left.
}

---
Qualquer tag html pode ter atributo id, que identifica UNICAMENTE o elemento.
---
CSS - Seletor hierárquico

div p {
	color: red
}

Pega todos os parágrafos que são descendentes de divs. Exemplo:
<div>
	<p>pega</p>
</div>

<div>
	<article>
		<p>pega</p>
	</article>
	<p>pega</p>
</div>

<body>
	<p>não pega>
	<div>
		<p>pega</p>
	</div>
</body>

---
CSS - Seletor de id
<div>
	<h1>asodiapo</h1>
	<p></p>
</div>
<p>2312</p>
<p>wqeq</p>
<div id="rodape">
	<p>Copyright 2016</p>
	<h2>oiuroiu</h2>
</div>

#rodape p {
	color: red; -- Vale só para o Copyright
}
---
Há um conceito importante que é o do fluxo HTML. Os elementos são mostrados na ordem
que aparecem no HTML.

Quando usamos o CSS "float", é como se o elemento saísse do fluxo. O elemento pode
flutuar à direita ou à esquerda. Os elementos restantes "sobem" para ocupar o espaço
disponível.
---
O HTML deve representar a estrutura da página, os significados *semânticos* nela.
Evite contaminar o HTML com questões de estilo (e, vice-versa, contaminar o CSS com estrutura).

Privilegie a semântica no HTML. O Estilo você deve resolver só no CSS.
---
CSS - Seletor de classe

<div class="carnaval carnaval2017">
</div>

.carnaval {
	color: red;
}

.carnaval2017 {
	padding: 5px;
}

Como tem 2 classes no elemento, aplica as duas.
Em caso de colisão... Veremos mais tarde.
---
O HTML5 provê tag novas, privilegiando a semântica.
Exemplo:
<header>
<footer>
<section>

Com HTML4, usaríamos <div>.

Outro exemplo é a tag <nav>, para agrupar links que realizam navegação no site.
---
Na prática, usaremos Seletor de Classe apenas (e os seletores hierárquicos com classes).
Desta forma, o CSS e o HTML ficam mais desacoplados.

As classes devem representar elementos *semânticos* de sua página.
Procure dar significado para as suas classes.
---
Os navegadores já possuem estilos padrões para os elementos.
Para termos uma experiência mais controlada, podemos aplicar um CSS para resetar
os padrões.
Há alguns disponíveis na Web. Um dos mais conhecidos é o do Eric Meyer.
---
No futuro (para Reset), poderemos usar um CSS Reset "padrão", como por exemplo:
* {
	all: unset;
}

mas isso ainda é experimental...
---
Posicionamento.

Há alguns tipos de posicionamento no CSS.

position: static;
Padrão, aparece no fluxo HTML;

position: relative;
Permite posicionar com top/left/right/bottom, relativo à posição que ocuparia no fluxo html.
Continua a ocupar espaço no fluxo.

position: absolute;
Se posiciona em relação à página.
A não ser quando o elemento pai tem posicionamento diferente de static.
Neste caso, é absolute em relação ao pai;

position: fixed;
Faz com que o elemento fique em posição fixa na tela, mesmo que o conteúdo role;
---
