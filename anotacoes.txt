=== WD43 - HTML, CSS, JS
Podemos encarar a estrutura de uma página Web como a construção de um prédio.

* Estrutura - Planta baixa - HTML


---
Podemos usar CSS para reduzir (ou aumentar) a largura de um elemento (tag).
Apenas tag do tipo block podem ter width definida.
Elementos do tipo inline ignoram esta configuração.

Os elementos tem um box-model.

<element>
	<margin - Separa um elemento do outro>
		<border>
			<padding - Separa o conteúdo da borda>
				<conteúdo>
					width só afeta esta parte!!!
				</conteúdo>
			</padding>
		</border>
	</margin>
</element>


Short hand property para padding e similares (ex: margin)
padding-top: 10px;
padding-right: 15px;
padding-bottom: 20px;
padding-left: 50px;

Siga o padrão do relógio: (top right bottom left)
padding: 50px; - Vale para todos;
padding: 50px 100px; - Top/bottom -> 50px Right/left -> 100px
padding: 2px 7px 20px; - Top -> 2px Right/left -> 7px Bottom -> 20px

Podemos usar o valor "auto" para o CSS calcular. Exemplo:
body {
	width: 940px;
	margin: 0 auto; Deixa top/bottom com zero e divide por igual a sobra com right/left.
}

---
Qualquer tag html pode ter atributo id, que identifica UNICAMENTE o elemento.
---
CSS - Seletor hierárquico

div p {
	color: red
}

Pega todos os parágrafos que são descendentes de divs. Exemplo:
<div>
	<p>pega</p>
</div>

<div>
	<article>
		<p>pega</p>
	</article>
	<p>pega</p>
</div>

<body>
	<p>não pega>
	<div>
		<p>pega</p>
	</div>
</body>

---
CSS - Seletor de id
<div>
	<h1>asodiapo</h1>
	<p></p>
</div>
<p>2312</p>
<p>wqeq</p>
<div id="rodape">
	<p>Copyright 2016</p>
	<h2>oiuroiu</h2>
</div>

#rodape p {
	color: red; -- Vale só para o Copyright
}
---
Há um conceito importante que é o do fluxo HTML. Os elementos são mostrados na ordem
que aparecem no HTML.

Quando usamos o CSS "float", é como se o elemento saísse do fluxo. O elemento pode
flutuar à direita ou à esquerda. Os elementos restantes "sobem" para ocupar o espaço
disponível.
---
O HTML deve representar a estrutura da página, os significados *semânticos* nela.
Evite contaminar o HTML com questões de estilo (e, vice-versa, contaminar o CSS com estrutura).

Privilegie a semântica no HTML. O Estilo você deve resolver só no CSS.
---
CSS - Seletor de classe

<div class="carnaval carnaval2017">
</div>

.carnaval {
	color: red;
}

.carnaval2017 {
	padding: 5px;
}

Como tem 2 classes no elemento, aplica as duas.
Em caso de colisão... Veremos mais tarde.
---
O HTML5 provê tag novas, privilegiando a semântica.
Exemplo:
<header>
<footer>
<section>

Com HTML4, usaríamos <div>.

Outro exemplo é a tag <nav>, para agrupar links que realizam navegação no site.
---
Na prática, usaremos Seletor de Classe apenas (e os seletores hierárquicos com classes).
Desta forma, o CSS e o HTML ficam mais desacoplados.

As classes devem representar elementos *semânticos* de sua página.
Procure dar significado para as suas classes.
---
Os navegadores já possuem estilos padrões para os elementos.
Para termos uma experiência mais controlada, podemos aplicar um CSS para resetar
os padrões.
Há alguns disponíveis na Web. Um dos mais conhecidos é o do Eric Meyer.
---
No futuro (para Reset), poderemos usar um CSS Reset "padrão", como por exemplo:
* {
	all: unset;
}

mas isso ainda é experimental...
---
Posicionamento.

Há alguns tipos de posicionamento no CSS.

position: static;
Padrão, aparece no fluxo HTML;

position: relative;
Permite posicionar com top/left/right/bottom, relativo à posição que ocuparia no fluxo html.
Continua a ocupar espaço no fluxo.

position: absolute;
Se posiciona em relação à página.
A não ser quando o elemento pai tem posicionamento diferente de static.
Neste caso, é absolute em relação ao pai;

position: fixed;
Faz com que o elemento fique em posição fixa na tela, mesmo que o conteúdo role;
---
CSS3 - Seletor de atributo

input[type=search] {
	padding: 5px;
}

Seleciona as tags "input" com atributo "type" igual a "search".
OBS: A tag deve estar grudada no "[".

O seletor de atributo vale para qualquer atributo e qualquer tag.
Ou até sozinho.

[src=img/lupa.png] {
	padding: 5px;
}

Qualquer tag com o atributo "src" igual a "img/lupa.png"
---
CSS - Seletor ","

Quando usamos a ",", é como se estivéssemos declarando o CSS duas vezes.

p,.xuxa {
	padding: 5px;
}

é equivalente a

.xuxa {
	padding: 5px;
}

p {
	padding: 5px;
}

CUIDADO: Não usar espaço (vira seletor hierárquico)
---
CSS - Seletor de classe em tag

p.xuxa {
	padding: 5px;
}

Esse é diferente. Pega todas as tags "p" QUE POSSUEM a classe "xuxa".
---
Podemos ter o mesmo seletor declarado duas vezes.

.menu {
	padding: 5px;
}

.menu {
	margin: 10px;
}

É equivalente a
.menu {
	padding: 5px;
	margin: 10px;
}

Não é boa prática declarar separado. Mas pode ser interessante para
efeito didático (a apostila usa muito assim).
---
Olhar comentário no "estilos.css" sobre como colocar uma linha no final
de cada item do menu (usando ul e li)
---
CSS - display: inline-block;

Torna os elementos inline (permite um ao lado do outro), mas permite definir
propriedades de width, etc.

Melhor que "display: inline;"?
Depende... IE7, por exemplo, não suporta inline-block;
---
Image Replacement

Algumas vezes queremos usar imagens no lugar de texto.
Exemplo:
<h1>Mirror Fashion</h1>

Se queremos usar a imagem como título.
Qual o problema?

1) Indexação de buscadores (Google)
	O Google não enxerga as imagens

2) Acessibilidade
	Os leitores de acessibidade não conhecem as imagens (o mesmo vale para seus alt's)
---
Design responsivo

<link rel="stylesheet" href="mobile.css" media="screen and max-width=320px">

max-width=320px --> 0 a 320 (principalmente Desktop first)
min-width=320px --> 320 e acima (principalmente Mobile first)
---
O problema é que o max-width (e min) trabalham com a resolução.
Os smartphones tem um tela pequena, mas com uma resolução bem alta.

Podemos resolver isso, indicando que queremos com "width" o tamanho adequado
para a experiência do usuário. Essa propriedade é relacionada ao viewport.

<meta name="viewport" content="width=device-width">
---
Artigo complementar

"Aplicando o Progressive Enhancement", no Blog da Caelum
http://blog.caelum.com.br/aplicando-o-progressive-enhancement/
---
Medida - em;

1em é igual ao tamanho da fonte do elemento;
Exemplo, se a fonte é 16px, 1em é 16px;
---
html5test.com

Para avaliar o suporte ao HTML 5
---
http://caniuse.com/

Para saber o suporte de CSS para uma tag
---
Bootstrap

O grid system do bootstrap usa sempre 12 colunas.
---
JavaScript não-obstrusivo

Evitar usar os eventos "onXXX" (ex: onclick="") nas tags HTML.
Isso acopla demais o JS com o HTML (coloca JS no HTML)

Exemplo:

** Obstrusivo (ou intrusivo)
HTML:
<h2 id="historia" onclick="trocaCor();">História</h2>

JS:
function trocaCor() { /* codigo da função */ }

** Não-obstrusivo (ou não-intrusivo)
HTML:
<h2 id="historia">História</h2>

JS:
function trocaCor() { /* codigo da função */ }

var h2 = document.querySelector('#historia');
h2.onclick = trocaCor;

OU

document.querySelector('#historia').onclick = trocaCor;
---
Query Selector em Document

Busca por ID
document.querySelector("#id");
Retorna sempre um (o primeiro que encontrar, usando o "fluxo HTML")

Busca por outro tipo de seletor
document.querySelectorAll("h1");
Retorna TODOS os elementos que satisfazem a query (um array)
---
https://browserdiet.com

Dicas de otimização.
---
Opções mais leves que o jQuery

jQuery suporta diversas funcionalidades e diversos browsers.
Mas tem 30K (na versão 1), que pode ser problemático em projetos mobile.

Há opções com menos suporte a dispositivos e funções, mas que são menores.
Exemplos:
Zepto (15K)
jqmobi (5K)

Ambos implementam o padrão Sizzle (que o jQuery implementa).
jQuery (versão 2) também é menor. Mas não tem suporte para browser mais antigos (IE 7, 8, 9).
---
Para ser um profissional completo, é necessário acrescentar:

Preprocessador
- LESS - Mais simples
- SASS - Mais requisitado, um pouco mais complexo

Ferramenta de build
- Grunt
- Gulp - Mais usado e "da moda"

SCM
- git
---
Deploy na nuvem

- Amazon Elastic Cloud - pago
- OpenShift - mais opções gratuitas que a Amazon
---
Atenção com a separação de responsabilidades (separation of concerns)

NÃO USE
$('p').css('background: red');

É melhor criar uma classe no CSS e usar:
$('p').addClass('vermelho');
---
Site de ofertas de emprego

http://www.ondetrabalhar.com
---
Ao atribuirmos manipuladores de eventos, o "this" dentro do manipulador
do evento é o próprio elemento do DOM.

Se queremos usar o jQuery com ele, precisamos envolvê-lo com o jQuery.

$('seletor').click(function () {
	$(this).closest(...).removeClass('outro');	
});
---
Para receber informações em PUSH do servidor, não emule usando requisições.

É melhor usar WebSocket.
Uma biblioteca que ajuda é a Socket.io.
---
Arduino

Biblioteca (e componentes físicos)
Conjunto de hardware e software para criação de coisas simples (ou nem tanto)

https://www.arduino.cc/
---
